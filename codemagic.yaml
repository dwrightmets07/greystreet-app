workflows:
  ios-simulator-build:
    name: Build for iOS Simulator (Appetize)
    max_build_duration: 60
    environment:
      xcode: latest
      node: 20
    scripts:
      - name: Install deps & build web + sync Capacitor
        script: |
          set -e
          npm ci
          npm run build
          npx cap sync ios
      - name: Install CocoaPods
        script: |
          set -e
          cd ios/App
          pod install --repo-update
      - name: Build (iphonesimulator, Debug)
        script: |
          set -euo pipefail
          cd ios/App
          xcodebuild \
            -workspace App.xcworkspace \
            -scheme App \
            -configuration Debug \
            -sdk iphonesimulator \
            -destination 'generic/platform=iOS Simulator' \
            -derivedDataPath $PWD/build \
            build
      - name: Zip simulator .app for Appetize
        script: |
          set -e
          APP_PATH=$(find ios/App/build -type d -name "*.app" -path "*/Build/Products/*-iphonesimulator/*" | head -n 1 || true)
          [ -z "$APP_PATH" ] && { echo "ERROR: No simulator .app found."; exit 1; }
          cd "$(dirname "$APP_PATH")"
          zip -r Appetize-sim.zip "$(basename "$APP_PATH")"
    artifacts:
      - ios/App/build/Build/Products/*-iphonesimulator/*.app
      - ios/App/build/Build/Products/*-iphonesimulator/Appetize-sim.zip

  ios-device-build:
    name: Build for iOS Device (unsigned)
    max_build_duration: 60
    environment:
      xcode: latest
      node: 20
    scripts:
      - name: Install deps & build web + sync Capacitor
        script: |
          set -e
          npm ci
          npm run build
          npx cap sync ios
      - name: Install CocoaPods
        script: |
          set -e
          cd ios/App
          pod install --repo-update
      - name: Build (iphoneos, Release) unsigned
        script: |
          set -euo pipefail
          cd ios/App
          xcodebuild \
            -workspace App.xcworkspace \
            -scheme App \
            -configuration Release \
            -sdk iphoneos \
            -destination 'generic/platform=iOS' \
            -derivedDataPath $PWD/build \
            CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY="" \
            build
    artifacts:
      - ios/App/build/Build/Products/Release-iphoneos/*.app

  ios-testflight:
    name: iOS TestFlight (signed)
    max_build_duration: 60
    integrations:
      app_store_connect: "ASC"
    environment:
      xcode: latest
      node: 20
      groups:
        - ios_signing1           # contains P12_BASE64, P12_PASSWORD, PROFILE_BASE64
      vars:
        BUNDLE_ID: "org.greystreet.app"
        PROFILE_NAME: "GreyStreet_Prod_Profile"
        DEVELOPMENT_TEAM: "J5K98H247G"
    scripts:
      - name: Install deps & build web + sync Capacitor
        script: |
          set -e
          npm ci
          npm run build
          npx cap sync ios

      - name: Install CocoaPods
        script: |
          set -e
          cd ios/App
          pod install --repo-update

      - name: Write signing files from env (with checks)
        script: |
          set -e
          mkdir -p $CM_BUILD_DIR/signing
          if [ -z "${P12_BASE64:-}" ] || [ -z "${PROFILE_BASE64:-}" ]; then
            echo "ERROR: P12_BASE64 or PROFILE_BASE64 is empty. Check env group ios_signing1."
            exit 1
          fi
          echo "$P12_BASE64"     | base64 --decode > $CM_BUILD_DIR/signing/cert.p12
          echo "$PROFILE_BASE64" | base64 --decode > $CM_BUILD_DIR/signing/${PROFILE_NAME}.mobileprovision
          ls -la $CM_BUILD_DIR/signing
          echo "cert.p12 size: $(stat -f%z $CM_BUILD_DIR/signing/cert.p12) bytes"
          echo "${PROFILE_NAME}.mobileprovision size: $(stat -f%z $CM_BUILD_DIR/signing/${PROFILE_NAME}.mobileprovision) bytes"

      - name: Import certificate to keychain (default, search list, ACL)
        script: |
          set -e
          KEYCHAIN=build.keychain
          KEYCHAIN_PATH=~/Library/Keychains/${KEYCHAIN}-db
          security create-keychain -p "" "$KEYCHAIN"
          security unlock-keychain -p "" "$KEYCHAIN"
          security set-keychain-settings -lut 21600 "$KEYCHAIN"
          security list-keychains -s "$KEYCHAIN"
          security default-keychain -s "$KEYCHAIN"
          security import $CM_BUILD_DIR/signing/cert.p12 -k "$KEYCHAIN" -P "$P12_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security
          set +e
          curl -fsSL https://www.apple.com/certificateauthority/AppleWWDRCAG4.cer -o $CM_BUILD_DIR/signing/AppleWWDRCAG4.cer
          CURL_STATUS=$?
          set -e
          if [ "$CURL_STATUS" -eq 0 ]; then
            security import $CM_BUILD_DIR/signing/AppleWWDRCAG4.cer -k "$KEYCHAIN" -T /usr/bin/codesign -T /usr/bin/security || true
          fi
          security set-key-partition-list -S apple-tool:,apple: -s -k "" "$KEYCHAIN"
          security find-identity -v -p codesigning "$KEYCHAIN" || true
          echo "KEYCHAIN_PATH=$KEYCHAIN_PATH" > $CM_BUILD_DIR/keychain_path.env

      - name: Install provisioning profile & capture UUID (robust)
        script: |
          set -e
          PROFILE_SRC="$CM_BUILD_DIR/signing/${PROFILE_NAME}.mobileprovision"
          if [ ! -f "$PROFILE_SRC" ]; then
            echo "ERROR: Profile not found at $PROFILE_SRC"
            exit 1
          fi
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp "$PROFILE_SRC" ~/Library/MobileDevice/Provisioning\ Profiles/
          TMP_PLIST="$CM_BUILD_DIR/profile.plist"
          security cms -D -i "$PROFILE_SRC" > "$TMP_PLIST" || { echo "ERROR: Failed to parse mobileprovision."; exit 1; }
          APP_ID=$(/usr/libexec/PlistBuddy -c 'Print:Entitlements:application-identifier' "$TMP_PLIST" 2>/dev/null || echo "")
          echo "application-identifier: $APP_ID"
          case "$APP_ID" in
            *"$BUNDLE_ID") ;;
            *) echo "ERROR: Profile app id ($APP_ID) does not match bundle ($BUNDLE_ID)"; exit 1 ;;
          esac
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print:UUID' "$TMP_PLIST" 2>/dev/null || echo "")
          [ -z "$PROFILE_UUID" ] && { echo "ERROR: Could not extract UUID from profile."; exit 1; }
          echo "PROFILE_UUID=$PROFILE_UUID" > $CM_BUILD_DIR/profile_uuid.env

      - name: Apply profile to project (App target only)
        script: |
          set -e
          xcode-project use-profiles

      - name: Debug signing (pre-archive)
        script: |
          set -e
          cd ios/App
          xcodebuild -workspace App.xcworkspace -scheme App -showBuildSettings | \
            egrep 'PRODUCT_BUNDLE_IDENTIFIER|CODE_SIGN_STYLE|CODE_SIGN_IDENTITY|DEVELOPMENT_TEAM|PROVISIONING_PROFILE' || true

      - name: Set unique build number (with seconds)
        script: |
          set -e
          BUILD_TS=$(date -u +%Y%m%d%H%M%S)
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $BUILD_TS" ios/App/App/Info.plist
          echo "CFBundleVersion set to $BUILD_TS"

      - name: Build signed IPA (Distribution identity + team)
        script: |
          set -euo pipefail
          source $CM_BUILD_DIR/keychain_path.env
          cd ios/App
          xcodebuild \
            -workspace App.xcworkspace \
            -scheme App \
            -configuration Release \
            -destination 'generic/platform=iOS' \
            -archivePath $PWD/build/App.xcarchive \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM=${DEVELOPMENT_TEAM} \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            OTHER_CODE_SIGN_FLAGS="--keychain $KEYCHAIN_PATH" \
            archive
          cat > $PWD/exportOptions.plist <<'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
            <dict>
              <key>method</key>
              <string>app-store</string>
              <key>provisioningProfiles</key>
              <dict>
                <key>org.greystreet.app</key>
                <string>GreyStreet_Prod_Profile</string>
              </dict>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>compileBitcode</key>
              <false/>
            </dict>
          </plist>
          EOF
          xcodebuild -exportArchive \
            -archivePath $PWD/build/App.xcarchive \
            -exportOptionsPlist $PWD/exportOptions.plist \
            -exportPath $PWD/build/export

      - name: Sanity print app identifiers (post-export)
        script: |
          set -e
          unzip -qq -o ios/App/build/export/App.ipa -d /tmp/ipa_extract
          APP_PLIST_PATH=$(ls /tmp/ipa_extract/Payload/*.app/Info.plist | head -n 1)
          echo "CFBundleIdentifier: $(/usr/libexec/PlistBuddy -c 'Print :CFBundleIdentifier' "$APP_PLIST_PATH")"
          echo "CFBundleShortVersionString: $(/usr/libexec/PlistBuddy -c 'Print :CFBundleShortVersionString' "$APP_PLIST_PATH")"
          echo "CFBundleVersion: $(/usr/libexec/PlistBuddy -c 'Print :CFBundleVersion' "$APP_PLIST_PATH")"

    artifacts:
      - ios/App/build/export/*.ipa

    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true
      email:
        recipients:
          - patobrien2017@gmail.com
