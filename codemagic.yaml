workflows:
  ios-simulator-build:
    name: Build for iOS Simulator (Appetize)
    max_build_duration: 60
    environment:
      xcode: latest
      node: 20
    scripts:
      - name: Install deps & build web + sync Capacitor
        script: |
          set -e
          npm ci
          npm run build
          npx cap sync ios
      - name: Install CocoaPods
        script: |
          set -e
          cd ios/App
          pod install --repo-update
      - name: Build (iphonesimulator, Debug)
        script: |
          set -euo pipefail
          cd ios/App
          xcodebuild \
            -workspace App.xcworkspace \
            -scheme App \
            -configuration Debug \
            -sdk iphonesimulator \
            -destination 'generic/platform=iOS Simulator' \
            -derivedDataPath $PWD/build \
            build
      - name: Zip simulator .app for Appetize
        script: |
          set -e
          APP_PATH=$(find ios/App/build -type d -name "*.app" -path "*/Build/Products/*-iphonesimulator/*" | head -n 1 || true)
          [ -z "$APP_PATH" ] && { echo "ERROR: No simulator .app found."; exit 1; }
          cd "$(dirname "$APP_PATH")"
          zip -r Appetize-sim.zip "$(basename "$APP_PATH")"
    artifacts:
      - ios/App/build/Build/Products/*-iphonesimulator/*.app
      - ios/App/build/Build/Products/*-iphonesimulator/Appetize-sim.zip

  ios-device-build:
    name: Build for iOS Device (unsigned)
    max_build_duration: 60
    environment:
      xcode: latest
      node: 20
    scripts:
      - name: Install deps & build web + sync Capacitor
        script: |
          set -e
          npm ci
          npm run build
          npx cap sync ios
      - name: Install CocoaPods
        script: |
          set -e
          cd ios/App
          pod install --repo-update
      - name: Build (iphoneos, Release) unsigned
        script: |
          set -euo pipefail
          cd ios/App
          xcodebuild \
            -workspace App.xcworkspace \
            -scheme App \
            -configuration Release \
            -sdk iphoneos \
            -destination 'generic/platform=iOS' \
            -derivedDataPath $PWD/build \
            CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY="" \
            build
    artifacts:
      - ios/App/build/Build/Products/Release-iphoneos/*.app

  ios-testflight:
    name: iOS TestFlight (signed)
    max_build_duration: 60
    integrations:
      app_store_connect: "ASC"   # <-- change if your ASC integration name differs
    environment:
      xcode: latest
      node: 20
      vars:
        BUNDLE_ID: "org.greystreet.app"
        PROFILE_NAME: "GreyStreet_Prod_Profile"   # <-- EXACT name in Signing identities
        DEVELOPMENT_TEAM: "J5K98H247G"            # <-- your Team ID
    scripts:
      - name: Install deps & build web + sync Capacitor
        script: |
          set -e
          npm ci
          npm run build
          npx cap sync ios

      - name: Install CocoaPods
        script: |
          set -e
          cd ios/App
          pod install --repo-update

      - name: Import uploaded certificate
        script: |
          set -e
          # Import .p12 uploaded in Signing identities into keychain
          keychain add-certificates
          echo "== Code signing identities available =="
          security find-identity -v -p codesigning || true

      - name: Apply uploaded provisioning profiles
        script: |
          set -e
          # Install any uploaded .mobileprovision files
          xcode-project use-profiles
          echo "== Installed profiles =="
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles || true

      - name: Select correct profile UUID
        script: |
          set -e
          TARGET_NAME="$PROFILE_NAME"
          TARGET_BUNDLE="$BUNDLE_ID"
          PROFILE_UUID=""
          PROFILE_PATH=""
          for f in ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision; do
            NAME=$(security cms -D -i "$f" | /usr/libexec/PlistBuddy -c 'Print:Name' /dev/stdin 2>/dev/null || echo "")
            APPID=$(security cms -D -i "$f" | /usr/libexec/PlistBuddy -c 'Print:Entitlements:application-identifier' /dev/stdin 2>/dev/null || echo "")
            if [[ "$NAME" == "$TARGET_NAME" && "$APPID" == *"$TARGET_BUNDLE" ]]; then
              PROFILE_UUID=$(security cms -D -i "$f" | /usr/libexec/PlistBuddy -c 'Print:UUID' /dev/stdin)
              PROFILE_PATH="$f"
              break
            fi
          done
          if [ -z "$PROFILE_UUID" ]; then
            echo "ERROR: Could not find provisioning profile named '$TARGET_NAME' for bundle '$TARGET_BUNDLE'."
            echo "Profiles present:"
            for f in ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision; do
              N=$(security cms -D -i "$f" | /usr/libexec/PlistBuddy -c 'Print:Name' /dev/stdin 2>/dev/null || echo "")
              A=$(security cms -D -i "$f" | /usr/libexec/PlistBuddy -c 'Print:Entitlements:application-identifier' /dev/stdin 2>/dev/null || echo "")
              echo "- $N | $A"
            done
            exit 1
          fi
          echo "Using profile: $TARGET_NAME ($PROFILE_UUID) at $PROFILE_PATH"
          echo "PROFILE_UUID=$PROFILE_UUID" > $CM_BUILD_DIR/profile_uuid.env

      - name: Debug signing (post-apply)
        script: |
          set -e
          cd ios/App
          xcodebuild -workspace App.xcworkspace -scheme App -showBuildSettings | \
            egrep 'PRODUCT_BUNDLE_IDENTIFIER|CODE_SIGN_STYLE|CODE_SIGN_IDENTITY|DEVELOPMENT_TEAM|PROVISIONING_PROFILE|PROVISIONING_PROFILE_SPECIFIER' || true

      - name: Build signed IPA (force profile UUID + team)
        script: |
          set -euo pipefail
          source $CM_BUILD_DIR/profile_uuid.env
          cd ios/App
          xcode-project build-ipa \
            --workspace App.xcworkspace \
            --scheme App \
            --archive-flags="-destination 'generic/platform=iOS' CODE_SIGN_STYLE=Manual DEVELOPMENT_TEAM=${DEVELOPMENT_TEAM} PROVISIONING_PROFILE_SPECIFIER=${PROFILE_UUID}"

          # Export with explicit mapping for your bundle id -> profile name
          cat > $PWD/exportOptions.plist <<EOF
          {
            "method": "app-store",
            "provisioningProfiles": {
              "org.greystreet.app": "GreyStreet_Prod_Profile"
            },
            "stripSwiftSymbols": true,
            "compileBitcode": false
          }
          EOF
          xcodebuild -exportArchive \
            -archivePath $PWD/build/ios/App.xcarchive \
            -exportOptionsPlist $PWD/exportOptions.plist \
            -exportPath $PWD/build/export

    artifacts:
      - ios/App/build/export/*.ipa

    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true
      email:
        recipients:
          - patobrien2017@gmail.com
