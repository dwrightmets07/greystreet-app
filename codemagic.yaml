workflows:
  ios-adhoc:
    name: iOS Ad Hoc (direct device install)
    max_build_duration: 60
    integrations:
      app_store_connect: "ASC"
    environment:
      xcode: latest
      node: 20
      groups:
        - ios_signing1     # needs: P12_BASE64, P12_PASSWORD, PROFILE_ADHOC_BASE64
      vars:
        BUNDLE_ID: "org.greystreet.app"
        PROFILE_ADHOC_NAME: "GreyStreet_AdHoc_Profile"
        DEVELOPMENT_TEAM: "J5K98H247G"
    scripts:
      - name: Install deps & build web + sync Capacitor
        script: |
          set -e
          npm ci
          npm run build
          npx cap sync ios

      - name: Install CocoaPods
        script: |
          set -e
          cd ios/App
          pod install --repo-update

      - name: Write signing files from env (Ad Hoc)
        script: |
          set -e
          mkdir -p $CM_BUILD_DIR/signing
          if [ -z "${P12_BASE64:-}" ] || [ -z "${PROFILE_ADHOC_BASE64:-}" ]; then
            echo "ERROR: Missing P12_BASE64 or PROFILE_ADHOC_BASE64 in group ios_signing1"
            exit 1
          fi
          echo "$P12_BASE64"           | base64 --decode > $CM_BUILD_DIR/signing/cert.p12
          echo "$PROFILE_ADHOC_BASE64" | base64 --decode > $CM_BUILD_DIR/signing/${PROFILE_ADHOC_NAME}.mobileprovision

      - name: Import certificate to keychain
        script: |
          set -e
          KEYCHAIN=build.keychain
          KEYCHAIN_PATH=~/Library/Keychains/${KEYCHAIN}-db
          security create-keychain -p "" "$KEYCHAIN"
          security unlock-keychain -p "" "$KEYCHAIN"
          security set-keychain-settings -lut 21600 "$KEYCHAIN"
          security list-keychains -s "$KEYCHAIN"
          security default-keychain -s "$KEYCHAIN"
          security import $CM_BUILD_DIR/signing/cert.p12 -k "$KEYCHAIN" -P "$P12_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security
          security set-key-partition-list -S apple-tool:,apple: -s -k "" "$KEYCHAIN"
          echo "KEYCHAIN_PATH=$KEYCHAIN_PATH" > $CM_BUILD_DIR/keychain_path.env

      - name: Install Ad Hoc profile & wire to App target (Pods stay Automatic)
        script: |
          set -e
          PROFILE_SRC="$CM_BUILD_DIR/signing/${PROFILE_ADHOC_NAME}.mobileprovision"
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp "$PROFILE_SRC" ~/Library/MobileDevice/Provisioning\ Profiles/
          TMP_PLIST="$CM_BUILD_DIR/adhoc.plist"
          security cms -D -i "$PROFILE_SRC" > "$TMP_PLIST"
          APP_ID=$(/usr/libexec/PlistBuddy -c 'Print:Entitlements:application-identifier' "$TMP_PLIST" 2>/dev/null || echo "")
          case "$APP_ID" in
            *"$BUNDLE_ID") ;;
            *) echo "ERROR: Ad Hoc profile app id ($APP_ID) doesn't match $BUNDLE_ID"; exit 1 ;;
          esac
          # Wire the profile to the App target only; Pods remain Automatic
          xcode-project use-profiles

      - name: Clean before build
        script: |
          set -e
          cd ios/App
          xcodebuild -workspace App.xcworkspace -scheme App -configuration Release clean

      - name: Bump build number (timestamp)
        script: |
          set -e
          BUILD_TS=$(date -u +%Y%m%d%H%M%S)
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $BUILD_TS" ios/App/App/Info.plist
          echo "CFBundleVersion set to $BUILD_TS"

      - name: Archive (manual signing for App only)
        script: |
          set -euo pipefail
          source $CM_BUILD_DIR/keychain_path.env
          cd ios/App
          xcodebuild \
            -workspace App.xcworkspace \
            -scheme App \
            -configuration Release \
            -destination 'generic/platform=iOS' \
            -archivePath $PWD/build/App.xcarchive \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM=${DEVELOPMENT_TEAM} \
            PRODUCT_BUNDLE_IDENTIFIER=${BUNDLE_ID} \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            OTHER_CODE_SIGN_FLAGS="--keychain $KEYCHAIN_PATH" \
            archive

      - name: ðŸ”§ Manually package Ad Hoc IPA (re-sign frameworks w/o profiles)
        script: |
          set -euo pipefail
          source $CM_BUILD_DIR/keychain_path.env
          cd ios/App

          ARCHIVE="$PWD/build/App.xcarchive"
          APP_PATH="$ARCHIVE/Products/Applications/App.app"
          OUT_DIR="$PWD/build/adhoc"
          ENT_PLIST="$PWD/entitlements.plist"
          IDENTITY="Apple Distribution: Patrick Obrien (J5K98H247G)"
          PROFILE_SRC="$CM_BUILD_DIR/signing/${PROFILE_ADHOC_NAME}.mobileprovision"

          if [ ! -d "$APP_PATH" ]; then
            echo "ERROR: App.app not found in archive."
            exit 1
          fi

          # Embed Ad Hoc profile into the app
          cp "$PROFILE_SRC" "$APP_PATH/embedded.mobileprovision"

          # Extract entitlements from the archived app binary
          /usr/bin/codesign -d --entitlements :- "$APP_PATH/App" > "$ENT_PLIST"

          # Re-sign all embedded frameworks WITHOUT any provisioning profile
          if [ -d "$APP_PATH/Frameworks" ]; then
            find "$APP_PATH/Frameworks" -type d -name "*.framework" | while read -r FRAME; do
              echo "Re-signing framework: $FRAME"
              /usr/bin/codesign --force --sign "$IDENTITY" --keychain "$KEYCHAIN_PATH" "$FRAME"
            done
          fi

          # Re-sign the main app with entitlements (no profile flag here)
          echo "Re-signing app binary with entitlements"
          /usr/bin/codesign --force --sign "$IDENTITY" --entitlements "$ENT_PLIST" --keychain "$KEYCHAIN_PATH" "$APP_PATH"

          # Verify code signatures
          /usr/bin/codesign --verify --deep --strict "$APP_PATH" || { echo "codesign verify failed"; exit 1; }

          # Create IPA: Payload/App.app zipped
          rm -rf "$OUT_DIR"
          mkdir -p "$OUT_DIR/Payload"
          cp -R "$APP_PATH" "$OUT_DIR/Payload/App.app"
          (cd "$OUT_DIR" && zip -yr "App-AdHoc.ipa" "Payload")

          echo "IPA created at: $OUT_DIR/App-AdHoc.ipa"
          ls -la "$OUT_DIR"

    artifacts:
      - ios/App/build/adhoc/App-AdHoc.ipa
      - ios/App/build/**/*.dSYM.zip

    publishing:
      email:
        recipients:
          - patobrien2017@gmail.com