workflows:
  ios-dev-minimal:
    name: iOS Development (minimal plist, validated)
    max_build_duration: 60
    environment:
      xcode: latest
      node: 20
      vars:
        BUNDLE_ID: "org.greystreet.app"
        DEVELOPMENT_TEAM: "J5K98H247G"
        IOS_WORKSPACE: "App.xcworkspace"
        IOS_SCHEME: "App"
        DEV_PROFILE_NAME: "GreyStreet_Dev_Profile"   # Exactly as itâ€™s named in Apple Developer
    scripts:
      - name: Install deps, build web, sync Capacitor
        script: |
          set -e
          npm ci
          npm run build
          npx cap sync ios

      - name: Install CocoaPods
        script: |
          set -e
          cd ios/App
          pod install --repo-update

      - name: Bump build number & clean
        script: |
          set -e
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $(date -u +%Y%m%d%H%M%S)" ios/App/App/Info.plist
          cd ios/App
          xcodebuild -workspace "$IOS_WORKSPACE" -scheme "$IOS_SCHEME" -configuration Debug clean

      - name: Archive (UNSIGNED to avoid Pods signing)
        script: |
          set -euo pipefail
          cd ios/App
          xcodebuild \
            -workspace "$IOS_WORKSPACE" \
            -scheme "$IOS_SCHEME" \
            -configuration Debug \
            -destination 'generic/platform=iOS' \
            -archivePath "$PWD/build/AppDev.xcarchive" \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGN_IDENTITY="" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            SKIP_INSTALL=NO \
            archive

      - name: Create exportOptions.dev.plist (super-minimal XML)
        script: |
          set -e
          PLIST_PATH="ios/App/exportOptions.dev.plist"
          cat > "$PLIST_PATH" <<'XML'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>development</string>
            <key>teamID</key>
            <string>J5K98H247G</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>org.greystreet.app</key>
              <string>GreyStreet_Dev_Profile</string>
            </dict>
            <key>signingStyle</key>
            <string>manual</string>
          </dict>
          </plist>
          XML

          echo "=== exportOptions.dev.plist (as written) ==="
          cat "$PLIST_PATH"

          echo "=== Validate with plutil ==="
          plutil -lint "$PLIST_PATH"

          echo "=== Print parsed dict with PlistBuddy ==="
          /usr/libexec/PlistBuddy -c 'Print' "$PLIST_PATH"

      - name: Check keychain & profiles before export
        script: |
          set -e
          echo "=== Keychain identities (code signing) ==="
          security find-identity -v -p codesigning || true
          echo "=== Installed provisioning profiles ==="
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles || true
          echo "=== Look for Dev profile by name ==="
          grep -l "GreyStreet_Dev_Profile" ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision | cat || true

      - name: Export Development IPA (xcodebuild)
        script: |
          set -euo pipefail
          cd ios/App
          xcodebuild -exportArchive \
            -archivePath "$PWD/build/AppDev.xcarchive" \
            -exportPath "$PWD/build/dev_export" \
            -exportOptionsPlist "$PWD/exportOptions.dev.plist"
          echo "=== Exported files ==="
          ls -la "$PWD/build/dev_export"

      - name: Sanity print (embedded profile UUID + devices)
        script: |
          set -e
          IPA="ios/App/build/dev_export/App.ipa"
          TMP="$(mktemp -d)"
          cp "$IPA" "$TMP/App.zip"
          unzip -q "$TMP/App.zip" -d "$TMP/unz"
          PROV="$TMP/unz/Payload/App.app/embedded.mobileprovision"
          echo "=== Dev Profile UUID ==="
          /usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< "$(security cms -D -i "$PROV")" || true
          echo "=== Provisioned Devices (first few) ==="
          /usr/libexec/PlistBuddy -c 'Print :ProvisionedDevices' /dev/stdin <<< "$(security cms -D -i "$PROV")" 2>/dev/null | head -n 20 || echo "No devices list"

    artifacts:
      - ios/App/build/dev_export/*.ipa
      - ios/App/build/AppDev.xcarchive
      - ios/App/exportOptions.dev.plist

    publishing:
      email:
        recipients:
          - patobrien2017@gmail.com